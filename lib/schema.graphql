enum Level {
  beginner
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  name: String!
  teacher: String
  description: String!
  year: String
  people: [Student]
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}


type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Retrieve all courses"
  getCourses: [Course]
  "Retrieve a course"
  getCourse(id: ID!): Course
    "Retrieve all people"
  getPeople: [Person]
  "Retrieve a person"
  getPerson(id: ID!): Person
  "Glogal Search"
  GeneralSearch(keyword: String!): [GlobalSearch]
}

type DocuemtnID {
  _id: ID!
}

input CourseInput {
  name: String!
  teacher: String
  description: String!
  year: String
  level: Level
}

input CourseEditInput {
  name: String
  teacher: String
  description: String
  year: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input PersonEditInput {
  name: String
  email: String
  avatar: String
  phone: String
}

type Mutation {
  "Create a course"
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Delete a course"
  deleteCourse(_id: ID!): DocuemtnID
  "Create a person"
  createPerson(input: PersonInput!): Course
  "Edit a person"
  editPerson(_id: ID!, input: PersonEditInput!): Course
  "Delete a person"
  deletePerson(_id: ID!): DocuemtnID
}
